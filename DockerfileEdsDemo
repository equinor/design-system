FROM node:18-alpine AS base
RUN npm install -g pnpm

FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy workspace files and all packages for dependency resolution
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml babel.config.cjs tsconfig.base.json ./
COPY packages/ ./packages/

# Install all dependencies
RUN pnpm install --no-frozen-lockfile

FROM base AS builder
WORKDIR /app

# Copy everything from deps (already includes packages/)
COPY --from=deps /app ./

# Build dependencies and the demo app
RUN pnpm --filter @equinor/eds-tokens-sync run build && \
    pnpm --filter @equinor/eds-tokens-build run build && \
    pnpm --filter @equinor/eds-tokens run build && \
    pnpm --filter eds-demo run build

FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production PORT=3000

RUN addgroup -S nextjs && \
    adduser -S --uid 12345 nextjs && \
    apk add --no-cache tini && \
    npm install -g pnpm

# Copy the built workspace
COPY --from=builder --chown=nextjs:nextjs /app ./

USER nextjs
EXPOSE 3000

ENTRYPOINT ["/sbin/tini", "--"]
WORKDIR /app/packages/eds-demo
CMD ["pnpm", "start"]