// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Checkbox Matches snapshot 1`] = `
<DocumentFragment>
  .c2 {
  --scale: 2;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  width: 100%;
  height: 100%;
  margin: 0;
  grid-area: input;
  -webkit-transform: scale(var(--scale));
  -ms-transform: scale(var(--scale));
  transform: scale(var(--scale));
  cursor: pointer;
}

.c2:focus {
  outline: none;
}

.c2[data-focus-visible-added]:focus + svg {
  outline: 2px dashed var(--eds_interactive__focus,rgba(0,112,121,1));
  outline-offset: 10px;
}

.c2:focus-visible + svg {
  outline: 2px dashed var(--eds_interactive__focus,rgba(0,112,121,1));
  outline-offset: 10px;
}

.c2:not(:checked) ~ svg path[name='checked'] {
  display: none;
}

.c2:not(:checked) ~ svg path[name='not-checked'] {
  display: inline;
}

.c2:checked ~ svg path[name='not-checked'] {
  display: none;
}

.c2:checked ~ svg path[name='checked'] {
  display: inline;
}

.c3 {
  grid-area: input;
  pointer-events: none;
}

.c1 {
  display: inline-grid;
  grid: [input] 1fr / [input] 1fr;
  position: relative;
  padding-left: 12px;
  padding-top: 12px;
  padding-right: 12px;
  padding-bottom: 12px;
}

.c1::before {
  content: '';
  position: absolute;
  width: 40px;
  aspect-ratio: 1/1;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  border-radius: 100%;
}

.c0 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  cursor: pointer;
}

.c4 {
  margin: 0;
  color: var(--eds_navigation__menu_title_color,rgba(61,61,61,1));
  font-family: Equinor;
  font-size: 1.000rem;
  font-weight: 400;
  line-height: 1.000em;
  -webkit-letter-spacing: 0.013em;
  -moz-letter-spacing: 0.013em;
  -ms-letter-spacing: 0.013em;
  letter-spacing: 0.013em;
  text-align: left;
}

@media (hover:hover) and (pointer:fine) {
  .c1 > svg {
    z-index: 1;
  }

  .c1:hover::before {
    background-color: var(--eds_interactive_primary__hover_alt,rgba(222,237,238,1));
  }
}

<label
    class="c0"
  >
    <span
      class="c1"
    >
      <input
        class="c2"
        type="checkbox"
      />
      <svg
        aria-hidden="true"
        class="c3"
        fill="var(--eds_interactive_primary__resting, rgba(0, 112, 121, 1))"
        height="24"
        viewBox="0 0 24 24"
        width="24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          class=""
          clip-rule="evenodd"
          d="M5 3h14c1.1 0 2 .9 2 2v14c0 1.1-.9 2-2 2H5c-1.1 0-2-.9-2-2V5c0-1.1.9-2 2-2Zm4.3 13.29c.39.39 1.02.39 1.41 0l7.58-7.59a.996.996 0 1 0-1.41-1.41L10 14.17l-2.88-2.88a.996.996 0 1 0-1.41 1.41l3.59 3.59Z"
          fill-rule="evenodd"
          name="checked"
        />
        <path
          class=""
          clip-rule="evenodd"
          d="M5 3h14c1.1 0 2 .9 2 2v14c0 1.1-.9 2-2 2H5c-1.1 0-2-.9-2-2V5c0-1.1.9-2 2-2Zm1 16h12c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1H6c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1Z"
          fill-rule="evenodd"
          name="not-checked"
        />
      </svg>
    </span>
    <span
      class="c4"
    >
      checkbox
    </span>
  </label>
</DocumentFragment>
`;
