import { existsSync, mkdirSync } from 'node:fs'
import { readFile, writeFile } from 'node:fs/promises'
import path from 'node:path'
import { _extend } from '../utils'
import { includeTokenFilter } from '../filter/includeTokenFilter'
import { mergeLightDarkFoundation } from '../utils/mergeLightDarkFoundation'

import type { TokenConfig } from './utils'
import {
  loadTokenConfig,
  sanitizeSubdir,
  cleanBuildOutputsForSubdir,
} from './utils'

async function buildColorScheme(cfg: TokenConfig) {
  const tokenConfig = cfg || {}

  const FIGMA_PROJECT_ID = (tokenConfig.figmaProjectFoundationId ?? '').trim()
  if (!FIGMA_PROJECT_ID) {
    console.error(
      'Missing figmaProjectFoundationId. Set it in token-config.json (figmaProjectFoundationId).',
    )
    process.exit(1)
  }

  const SCHEME_TOKENS_PREFIX =
    tokenConfig.schemeTokensPrefix ?? 'ðŸŒ— Color Scheme'
  const TOKEN_BASE = path.join('tokens', FIGMA_PROJECT_ID)
  const LIGHT_COLORS = path.join(TOKEN_BASE, 'Color Light.Mode 1.json')
  const DARK_COLORS = path.join(TOKEN_BASE, 'Color Dark.Mode 1.json')
  const LIGHT_SCHEME = path.join(
    TOKEN_BASE,
    `${SCHEME_TOKENS_PREFIX}.Light.json`,
  )
  const DARK_SCHEME = path.join(TOKEN_BASE, `${SCHEME_TOKENS_PREFIX}.Dark.json`)

  const BASE_BUILD_PATH = tokenConfig.buildPath ?? 'color/'
  const BUILD_PATH = path.posix.join(BASE_BUILD_PATH, 'color-scheme/') // subfolder under build/css
  const PREFIX = tokenConfig.variablePrefix ?? 'x'
  const COLOR_PREFIX = PREFIX + '-color' // e.g. "x-color"

  const fileNameLightColorSchemeTrimmed = 'light-color-scheme'
  const fileNameDarkColorSchemeTrimmed = 'dark-color-scheme'

  const lightColorScheme = _extend({
    source: [LIGHT_SCHEME],
    include: [LIGHT_COLORS],
    filter: (token: any) => includeTokenFilter(token, [SCHEME_TOKENS_PREFIX]),
    buildPath: BUILD_PATH,
    fileName: fileNameLightColorSchemeTrimmed,
    selector: '[data-color-scheme="light"]',
    prefix: COLOR_PREFIX,
    outputReferences: false,
  })

  const darkColorScheme = _extend({
    source: [DARK_SCHEME],
    include: [DARK_COLORS],
    filter: (token: any) => includeTokenFilter(token, [SCHEME_TOKENS_PREFIX]),
    buildPath: BUILD_PATH,
    fileName: fileNameDarkColorSchemeTrimmed,
    selector: '[data-color-scheme="dark"]',
    prefix: COLOR_PREFIX,
    outputReferences: false,
  })

  await lightColorScheme.buildAllPlatforms()
  await darkColorScheme.buildAllPlatforms()

  // Merge into color-scheme.css using light-dark()
  const ensureDir = path.resolve('build/css', sanitizeSubdir(BUILD_PATH))
  if (!existsSync(ensureDir)) mkdirSync(ensureDir, { recursive: true })
  const outputDir = `${process.cwd()}/build/css/color/color-scheme`
  mergeLightDarkFoundation({
    prefix: COLOR_PREFIX,
    outputDirectory: outputDir,
    lightFileName: 'light-color-scheme-trimmed.css',
    darkFileName: 'dark-color-scheme-trimmed.css',
    outputFileName: 'color-scheme.css',
  })

  // Ensure final file lives under scheme/ folder
  const defaultOutPath = path.resolve(
    'build/css',
    sanitizeSubdir(BASE_BUILD_PATH),
    'color-scheme.css',
  )
  const schemeOutPath = path.join(ensureDir, 'color-scheme.css')
  try {
    let css: string
    if (existsSync(defaultOutPath) && !existsSync(schemeOutPath)) {
      css = await readFile(defaultOutPath, 'utf8')
      await writeFile(schemeOutPath, css, 'utf8')
      // Attempt to remove the default file to avoid confusion
      try {
        await writeFile(defaultOutPath, '', 'utf8')
      } catch {}
    }
    css = await readFile(schemeOutPath, 'utf8')
    const banner = `/**\n * Do not edit directly, this file was auto-generated by scripts/build-color-scheme-variables.ts.\n */`
    const colorSchemeBlock = `:root,\n[data-color-scheme=\"light\"] {\n  color-scheme: light;\n}\n\n[data-color-scheme=\"dark\"] {\n  color-scheme: dark;\n}`

    // Avoid duplicating if rerun
    const hasSnippet =
      css.includes('color-scheme: light;') &&
      css.includes('color-scheme: dark;')
    const hasBanner = css.startsWith('/**\n * Do not edit directly')
    const updated = hasSnippet
      ? css
      : [hasBanner ? undefined : banner, '', colorSchemeBlock, '', css]
          .filter((v) => v !== undefined)
          .join('\n')
    await writeFile(schemeOutPath, updated, 'utf8')
  } catch (err) {
    console.warn('Failed to prepend color-scheme blocks:', err)
  }
}

async function main() {
  const args = new Set(process.argv.slice(2))
  const cfg = loadTokenConfig()

  if (args.has('-h') || args.has('--help')) {
    console.log(
      `Usage: build-color-scheme-variables [options]\n\n` +
        `Options:\n` +
        `  --no-clean       Do not clean build outputs before running\n` +
        `  -h, --help       Show this help`,
    )
    process.exit(0)
  }

  const doClean = !args.has('--no-clean')
  if (doClean) {
    const base = cfg.buildPath ?? 'color/'
    const sub = path.posix.join(base, 'color-scheme/')
    await cleanBuildOutputsForSubdir(sub)
  }

  await buildColorScheme(cfg)
}

main().catch((err) => {
  console.error('[build-color-scheme-variables] Failed:')
  console.error(err)
  process.exit(1)
})
